class Drag{constructor(i,t=null){this.elements=[],this.makeAllDraggable(i),this.dragging=null,this.events={dragmove:new Event("dragmove"),pointerup:new Event("pointerup"),pointerdown:new Event("pointerdown")},document.addEventListener("mouseup",()=>{this.dragging&&this.dragEnd()}),document.addEventListener("mousemove",()=>{this.dragging&&this.dragMove()}),t&&("object"==typeof t?(t.grid&&"object"==typeof t.grid&&2==t.grid.length&&(this.grid=t.grid),t.containment&&"string"==typeof t.containment&&document.querySelector(t.containment)&&(this.containment=t.containment),t.axis&&["x","y"].indexOf(t.axis)>-1&&(this.axis=t.axis)):console.warn("the options parameter must be an object"),this.containment&&this.getContainmentCoord())}makeAllDraggable(i){const t=document.querySelectorAll(i);for(let i=0;i<t.length;i++){const n=t[i],e=n.getBoundingClientRect().x,g=n.getBoundingClientRect().y;this.elements[i]={$element:n,isDragging:!1,startingPosition:{x:e,y:g},position:{x:e,y:g},relativeStartingPosition:{x:e,y:g},relativePosition:{x:e,y:g},dragPoint:{x:null,y:null},width:n.clientWidth,height:n.clientHeight},n.addEventListener("pointerdown",()=>this.pointerDown(this.elements[i]))}}getContainmentCoord(){var i=document.querySelector(this.containment);this.containment={name:this.containment,properties:{x:i.getBoundingClientRect().x,y:i.getBoundingClientRect().y,width:i.getBoundingClientRect().width,height:i.getBoundingClientRect().height}}}pointerDown(i){this.dragging=i,document.body.dispatchEvent(this.events.pointerdown),this.dragging.dragPoint.x=window.event.clientX-this.dragging.relativeStartingPosition.x,this.dragging.dragPoint.y=window.event.clientY-this.dragging.relativeStartingPosition.y,this.dragging.isDragging=!0}dragMove(){this.dragging.$element.dispatchEvent(this.events.dragmove),this.changeElementPosition(window.event.clientX,window.event.clientY),this.updateElement()}dragEnd(){document.body.dispatchEvent(this.events.pointerup),this.dragging.relativeStartingPosition.x=this.dragging.position.x,this.dragging.relativeStartingPosition.y=this.dragging.position.y,this.dragging.isDragging=!1,this.dragging=null}on(i,t){for(var n in this.elements)this.elements[n].$element.addEventListener(i,t)}changeElementPosition(i,t){const n=Object.assign({},this.dragging.position);this.grid&&this.moveOnGrid(i,t)||this.moveLinear(i,t),this.containment&&this.checkIsOnContainment(n),this.updateRelativePosition()}updateElement(){var i=this.dragging,t=i.position.x-i.startingPosition.x,n=i.position.y-i.startingPosition.y;this.dragging.$element.style.transform="translate("+t+"px, "+n+"px)"}moveOnGrid(i,t){var n=[i-this.dragging.position.x-this.dragging.dragPoint.x,t-this.dragging.position.y-this.dragging.dragPoint.y];(!this.axis||"x"==this.axis)&&(this.dragging.position.x+=Math.abs(n[0])>this.grid[0]?Math.sign(n[0])*this.grid[0]:0),(!this.axis||"y"==this.axis)&&(this.dragging.position.y+=Math.abs(n[1])>this.grid[1]?Math.sign(n[1])*this.grid[1]:0)}moveLinear(i,t){(!this.axis||"x"==this.axis)&&!this.grid&&(this.dragging.position.x=i-this.dragging.dragPoint.x),(!this.axis||"y"==this.axis)&&!this.grid&&(this.dragging.position.y=t-this.dragging.dragPoint.y)}updateRelativePosition(){this.dragging.relativePosition.x=this.dragging.position.x-this.dragging.startingPosition.x,this.dragging.relativePosition.y=this.dragging.position.y-this.dragging.startingPosition.y}checkIsOnContainment(i){(this.dragging.position.x<this.containment.properties.x||this.dragging.position.x+this.dragging.width>this.containment.properties.width)&&(this.dragging.position.x=i.x),(this.dragging.position.y<this.containment.properties.y||this.dragging.position.y+this.dragging.height>this.containment.properties.height)&&(this.dragging.position.y=i.y)}}