class Drag{constructor(t){this.elements=[],this.makeAllDraggable(t),this.currentDraggingElement=null,this.events={dragmove:new Event("dragmove"),pointerup:new Event("pointerup"),pointerdown:new Event("pointerdown")},document.addEventListener("mouseup",()=>{this.currentDraggingElement&&this.dragEnd()}),document.addEventListener("mousemove",()=>{this.currentDraggingElement&&this.dragMove()})}makeAllDraggable(t){const e=document.querySelectorAll(t);for(let t=0;t<e.length;t++){const n=e[t],i=n.getBoundingClientRect().x,r=n.getBoundingClientRect().y;this.elements[t]={$element:n,isDragging:!1,startingPosition:{x:i,y:r},position:{x:i,y:r},relativeStartingPosition:{x:i,y:r},relativePosition:{x:i,y:r},dragPoint:{x:null,y:null},width:n.clientWidth,height:n.clientHeight},n.setAttribute("draggable","true"),n.addEventListener("pointerdown",()=>this.pointerDown(this.elements[t]))}}pointerDown(t){this.currentDraggingElement=t,document.body.dispatchEvent(this.events.pointerdown),this.currentDraggingElement.dragPoint.x=window.event.clientX-this.currentDraggingElement.relativeStartingPosition.x,this.currentDraggingElement.dragPoint.y=window.event.clientY-this.currentDraggingElement.relativeStartingPosition.y,this.currentDraggingElement.isDragging=!0}dragMove(){this.currentDraggingElement.$element.dispatchEvent(this.events.dragmove),this.changeElementPosition(window.event.clientX,window.event.clientY),this.updateElement()}dragEnd(){document.body.dispatchEvent(this.events.pointerup),this.currentDraggingElement.relativeStartingPosition.x=this.currentDraggingElement.position.x,this.currentDraggingElement.relativeStartingPosition.y=this.currentDraggingElement.position.y,this.currentDraggingElement.isDragging=!1,this.currentDraggingElement=null}on(t,e){for(var n in this.elements)this.elements[n].$element.addEventListener(t,e)}changeElementPosition(t,e){this.currentDraggingElement.position.x=t-this.currentDraggingElement.dragPoint.x,this.currentDraggingElement.position.y=e-this.currentDraggingElement.dragPoint.y,this.currentDraggingElement.relativePosition.x=this.currentDraggingElement.position.x-this.currentDraggingElement.startingPosition.x,this.currentDraggingElement.relativePosition.y=this.currentDraggingElement.position.y-this.currentDraggingElement.startingPosition.y}updateElement(){var t=this.currentDraggingElement,e=t.position.x-t.startingPosition.x,n=t.position.y-t.startingPosition.y;this.currentDraggingElement.$element.style.transform="translate("+e+"px, "+n+"px)"}}